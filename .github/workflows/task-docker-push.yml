name: Create Docker image and push to registry

on:
  workflow_call:
    inputs:
      registry:
        type: string
        description: Package registry to push to
        default: 'github'
        required: true
      tags:
        type: string
        description: Docker tags to push
        required: true
        default: 'ghcr.io/smartive-education/app-pizza-hawaii:test'
      labels:
        type: string
        description: Docker labels to push

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

permissions:
  contents: read
  packages: write

jobs:
  github:
    runs-on: ubuntu-latest
    if: ${{ inputs.registry }} == 'github'
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ env.NPM_TOKEN }}

  google:
    runs-on: ubuntu-latest
    if: ${{ inputs.registry }} == 'google'
    steps:
      - uses: actions/checkout@v3

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/654053669202/locations/global/workloadIdentityPools/casfee23-pool/providers/casfee23-provider'
          service_account: 'casfee23-account@project-pizza-388116.iam.gserviceaccount.com'
          token_format: 'access_token'

      - name: Login to Google Cloud
        uses: docker/login-action@v2
        with:
          registry: 'europe-west6-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

  push:
    runs-on: ubuntu-latest
    needs: [github, google]
    if: success() && (needs.github.result == 'success' || needs.google.result == 'success')
    steps:
      - name: Build and push Docker image to ${{ inputs.registry }} registry
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ inputs.tags }}
          labels: ${{ inputs.labels }}
          secrets: |
            "npm_token=${{ env.NPM_TOKEN }}"
