name: Build and Deploy to Container Registry

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  ENVIRONMENT: 'stage' # stage | production
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  STAGE_REGISTRY: ghcr.io
  STAGE_OWNER: smartive-education
  STAGE_REPOSITORY: app-pizza-hawaii
  PRODUCTION_REGISTRY: europe-west6-docker.pkg.dev
  PRODUCTION_OWNER: mumble1/mumble-docker
  PRODUCTION_REPOSITORY: app-pizza-hawaii

jobs:
  build:
    name: Setup and test code quality
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: 18.x
          registry-url: https://npm.pkg.github.com/
          scope: '@smartive-education'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}

      - name: Prettier
        run: npm run prettier

      - name: Lint
        run: npm run lint

  create-test-docker-image:
    permissions: write-all

    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            echo "REGISTRY=${{ env.PRODUCTION_REGISTRY }}" >> $GITHUB_ENV
            echo "OWNER=${{ env.PRODUCTION_OWNER }}" >> $GITHUB_ENV
            echo "REPOSITORY=${{ env.PRODUCTION_REPOSITORY }}" >> $GITHUB_ENV
          else
            echo "REGISTRY=${{ env.STAGE_REGISTRY }}" >> $GITHUB_ENV
            echo "OWNER=${{ env.STAGE_OWNER }}" >> $GITHUB_ENV
            echo "REPOSITORY=${{ env.STAGE_REPOSITORY }}" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v3

      - name: Login to ${{ env.STAGE_REGISTRY }}
        if: env.ENVIRONMENT == 'stage'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.NPM_TOKEN }}

      - id: 'auth'
        name: 'Authenticate to ${{ env.PRODUCTION_REGISTRY }}'
        if: env.ENVIRONMENT == 'production'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/654053669202/locations/global/workloadIdentityPools/casfee23-pool/providers/casfee23-provider'
          service_account: 'casfee23-account@project-pizza-388116.iam.gserviceaccount.com'
          token_format: 'access_token'

      - name: Login to ${{ env.PRODUCTION_REGISTRY }}
        if: env.ENVIRONMENT == 'production'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build and push Docker image to ${{ env.REGISTRY }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          secrets: |
            "npm_token=${{ env.NPM_TOKEN }}"
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPOSITORY }}:test
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPOSITORY }}:${{ github.sha }}

  e2e:
    name: Playwright Tests
    runs-on: ubuntu-latest
    services:
      app:
        image: 'ghcr.io/smartive-education/app-pizza-hawaii:test'
        env:
          NEXT_PUBLIC_VERCEL_URL: ${{ env.NEXT_PUBLIC_VERCEL_URL }}
          ZITADEL_USERNAME: ${{ env.ZITADEL_USERNAME }}
          ZITADEL_PASSWORD: ${{ env.ZITADEL_PASSWORD }}
        ports:
          - 3000:3000
    steps:
      - uses: actions/checkout@v3

      - name: remove unnecessary files because actions/checkout@v3 does not sparse files
        run: |
          find . -type f ! -path "./tests/*" ! -name "playwright.config.ts" -delete
          find . -mindepth 1 -type d ! -path "./tests" ! -path "." -exec rm -rf {} +

      - uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        run: |
          npm init --yes
          npm install --save-dev @playwright/test
          npm install --save-dev dotenv
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
        env:
          NEXT_PUBLIC_VERCEL_URL: ${{ secrets.NEXT_PUBLIC_VERCEL_URL }}
          ZITADEL_USERNAME: ${{ secrets.ZITADEL_USERNAME }}
          ZITADEL_PASSWORD: ${{ secrets.ZITADEL_PASSWORD }}

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 5


  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    services:
      app:
        image: 'ghcr.io/smartive-education/app-pizza-hawaii:test'
        env:
          NEXT_PUBLIC_VERCEL_URL: ${{ env.NEXT_PUBLIC_VERCEL_URL }}
          ZITADEL_USERNAME: ${{ env.ZITADEL_USERNAME }}
          ZITADEL_PASSWORD: ${{ env.ZITADEL_PASSWORD }}
        ports:
          - 3000:3000

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Configure Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage
        env:
          NEXT_PUBLIC_VERCEL_URL: ${{ secrets.NEXT_PUBLIC_VERCEL_URL }}

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: lhci-report
          path: lhci-report/
          retention-days: 5
